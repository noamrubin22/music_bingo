{"ast":null,"code":"var _jsxFileName = \"/Users/noamrubin/Documents/Programming/web-projects/music_bingo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport \"./Board/Board.css\";\nimport Board from \"./Board/Board.js\";\nimport MuteButton from \"./MuteButton/MuteButton\";\nimport Description from \"./Description/Description\";\nimport React, { useState, useEffect } from \"react\";\nimport { Howl, Howler } from \"howler\";\nimport { sounds, winningCombinations, ticketNames } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [tickets, setTickets] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isWon, setIsWon] = useState(false);\n  const [winningArray, setWinningArray] = useState(Array(winningCombinations.length).fill(false));\n  useEffect(() => {\n    let shuffled = [...ticketNames.sort(() => Math.random() - 0.5)];\n    shuffled.splice(12, 0, \"CONF CALL MUSIC BINGO\");\n    setTickets(shuffled.map((name, index) => {\n      if (index !== 12) {\n        return {\n          ticket: name,\n          checked: false\n        };\n      } else {\n        return {\n          ticket: name,\n          checked: true,\n          music: false\n        };\n      }\n    }));\n    Howler.volume(1.0);\n  }, []);\n  useEffect(() => {\n    setIsWon(true);\n    setTimeout(function () {\n      setIsWon(false);\n    }, 2000);\n    playAllSounds(isMuted);\n  }, [winningArray]);\n  useEffect(() => {\n    checkWin();\n  }, [tickets]);\n\n  const checkWin = () => {\n    winningCombinations.forEach((winningCombination, index) => {\n      const isWinningCombination = winningCombination.every(winningIndex => tickets[winningIndex] && tickets[winningIndex].checked === true);\n\n      if (isWinningCombination && !winningArray[index]) {\n        const newWinningArr = winningArray.map((el, i) => {\n          if (index === i) {\n            return true;\n          }\n\n          return el;\n        });\n        setWinningArray(newWinningArr);\n      }\n    });\n  };\n\n  function playAllSounds(isMuted) {\n    if (!isMuted) {\n      tickets.forEach((ticket, index) => {\n        if (ticket.checked == true) {\n          playSound(sounds[index].sound);\n        }\n      });\n    }\n  }\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n  };\n\n  const playSound = (src, isMuted) => {\n    if (isMuted) return;\n    const sound = new Howl({\n      src\n    });\n    sound.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Description, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        isWon: isWon,\n        tickets: tickets,\n        setTickets: setTickets,\n        checkWin: checkWin,\n        playSound: playSound,\n        isMuted: isMuted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MuteButton, {\n      isMuted: isMuted,\n      toggleMute: toggleMute\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"m1Oh6LZZ2m50aRz/QqeA0coYnmI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noamrubin/Documents/Programming/web-projects/music_bingo/src/App.js"],"names":["Board","MuteButton","Description","React","useState","useEffect","Howl","Howler","sounds","winningCombinations","ticketNames","App","tickets","setTickets","isMuted","setIsMuted","isWon","setIsWon","winningArray","setWinningArray","Array","length","fill","shuffled","sort","Math","random","splice","map","name","index","ticket","checked","music","volume","setTimeout","playAllSounds","checkWin","forEach","winningCombination","isWinningCombination","every","winningIndex","newWinningArr","el","i","playSound","sound","toggleMute","src","play"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport \"./Board/Board.css\";\nimport Board from \"./Board/Board.js\";\nimport MuteButton from \"./MuteButton/MuteButton\";\nimport Description from \"./Description/Description\";\nimport React, { useState, useEffect } from \"react\";\nimport { Howl, Howler } from \"howler\";\nimport { sounds, winningCombinations, ticketNames } from \"./data\";\n\nconst App = () => {\n  const [tickets, setTickets] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isWon, setIsWon] = useState(false);\n  const [winningArray, setWinningArray] = useState(\n    Array(winningCombinations.length).fill(false)\n  );\n\n  useEffect(() => {\n    let shuffled = [...ticketNames.sort(() => Math.random() - 0.5)];\n    shuffled.splice(12, 0, \"CONF CALL MUSIC BINGO\");\n\n    setTickets(\n      shuffled.map((name, index) => {\n        if (index !== 12) {\n          return { ticket: name, checked: false };\n        } else {\n          return { ticket: name, checked: true, music: false };\n        }\n      })\n    );\n\n    Howler.volume(1.0);\n  }, []);\n\n  useEffect(() => {\n    setIsWon(true);\n    setTimeout(function () {\n      setIsWon(false);\n    }, 2000);\n    playAllSounds(isMuted);\n  }, [winningArray]);\n\n  useEffect(() => {\n    checkWin();\n  }, [tickets]);\n\n  const checkWin = () => {\n    winningCombinations.forEach((winningCombination, index) => {\n      const isWinningCombination = winningCombination.every(\n        (winningIndex) =>\n          tickets[winningIndex] && tickets[winningIndex].checked === true\n      );\n\n      if (isWinningCombination && !winningArray[index]) {\n        const newWinningArr = winningArray.map((el, i) => {\n          if (index === i) {\n            return true;\n          }\n          return el;\n        });\n        setWinningArray(newWinningArr);\n      }\n    });\n  };\n\n  function playAllSounds(isMuted) {\n    if (!isMuted) {\n      tickets.forEach((ticket, index) => {\n        if (ticket.checked == true) {\n          playSound(sounds[index].sound);\n        }\n      });\n    }\n  }\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n  };\n\n  const playSound = (src, isMuted) => {\n    if (isMuted) return;\n    const sound = new Howl({ src });\n    sound.play();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Description />\n        <Board\n          isWon={isWon}\n          tickets={tickets}\n          setTickets={setTickets}\n          checkWin={checkWin}\n          playSound={playSound}\n          isMuted={isMuted}\n        />\n      </div>\n      <MuteButton isMuted={isMuted} toggleMute={toggleMute} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}